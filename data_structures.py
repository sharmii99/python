# -*- coding: utf-8 -*-
"""Data Structures.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1px34UxmwuQoCNm0PHjWIlScGxIRwqVJn

# **Various Types of Data Structure in Python**

##**1. List**
"""

A = [11, "Sharmita", 3.65, 'Apple', True, False, "Cherry", "Banana"]
A

"""####**Indexing (Left to Right)**"""

print(A[2]) #to print the 3rd element from the left

"""####**Indexing Right to Left**"""

print(A[-2]) #to print the 2nd element from the right

"""This means the Lists are ordered.

####**Adding an element**
"""

A[5]= "SpiderMan" # adding this element in the 5th position from the left

A

"""This means that List is also editable.

####**To check all the methods available for Lst**
"""

dir(A)

"""###**append()**"""

A.append('Marvel') # to add an element at the end of the list
A

"""###**copy()**"""

B = A.copy() # to make a copy of a list
B

"""###**count()**"""

A.count('Sharmita') # to check how many times the specified element has appeared in that list

"""###**extend()**"""

A.extend([4,5,6]) # to add the elements of a list (or any iterable), to the end of the current list
A

"""####**insert()**"""

A.insert(5,'Apple') # to insert the element in the specified index position
A

"""####**index()**"""

A.index('Apple') # to check the first index position of a specified value

"""####**pop()**"""

A.pop(2) #to remove the element at the specified position

A

"""####**remove()**"""

A.remove('Apple') # to remove the first occurance of the specified value

A

"""####**reverse()**"""

A.reverse() # to reverse the positions of the elements in the list

A

"""####**clear()**"""

A.clear() #to clear all the elements from the list

A  #this becomes a null set

"""####**sort()**"""

C = [1,67,99.5]

C.sort() # to sort the elements in the list
C

"""##**2. Set**"""

set1 = {"Sharmita", "Sidharth", 99.984, "Chris", 78, "Apple", 95, "Sun", "Moon", 45, "Apple", "Sharmita", 78}
set2 = {"Sharmita", 99.984, "Chris", "Apple", "Sun", 45}

set1

"""the positions of the element has changed and the duplicate appearances of the elements has been deleted. It only gives UNIQUE ELEMENTS in the result. And SET is unordered. """

dir(set1) #to check all the methoids available for set

"""####**add()**"""

set1.add("London") # to add an element in the set
set1

"""####**copy()**"""

s1 = set1.copy() # to make a copy of the set
s1

"""####**difference()**"""

set1.difference(set2) # it gives the difference of the set with another specified set

"""####**difference_update()**"""

set1.difference_update(set2) #to remove the items in the set that are also included in another specified set

set1

set1 = {"Sharmita", "Sidharth", 99.984, "Chris", 78, "Apple", 95, "Sun", "Moon", 45, "Apple", "Sharmita", 78}
set1

"""####**discard()**"""

set1.discard('Sharmita') # to remove the specified element from the set
set1

"""####**intersection()**"""

set1.intersection(set2) # to check the intersection the set with another specified set

"""####**intersection_update()**"""

set1.intersection_update(set2) # to remove the elements in the set that are not present in the specified another set
set1

set1 = {"Sharmita", "Sidharth", 99.984, "Chris", 78, "Apple", 95, "Sun", "Moon", 45, "Apple", "Sharmita", 78}
set1

"""####**isdisjoint()**"""

set1.isdisjoint(set2) # to check whether the set is disjoint with specified anothert set or not

"""####**issubset()**"""

set1.issubset(set2) #to check whether the specified another set contains all the elements of this set or not

"""####**issuperset()**"""

set1.issuperset(set2) # to check whether this set contains the specified another set or not

"""####**pop()**"""

set1.pop() # it randomly deletes one element from the set

"""####**remove()**"""

set1.remove(99.984) # to delete the specified element from the set
set1

"""####**symmetric_difference()**"""

set1.symmetric_difference(set2) # it returns the set with the symmetric differences of two sets

"""####**symmetric_difference_update()**"""

set1.symmetric_difference_update(set2) #it updates the set with the symmetric differences of two sets
set1

set1 = {"Sharmita", "Sidharth", 99.984, "Chris", 78, "Apple", 95, "Sun", "Moon", 45, "Apple", "Sharmita", 78}
set1

"""####**union()**"""

set1.union(set2) # returns the set containing the union of the sets

"""####**update()**"""

set1.update(set2) #it updates the set with union of this set and others
set1

"""####**clear()**"""

set1.clear() # to clear all the elements of the set
set1

"""##**3. Tuple**"""

t = (1, 'Sharmi', 'SRK', 4.44, 'h', 'Sharmi')
t

"""###**Indexing**"""

t[0] # indexing left to right

t[-2] # indexing right to left

"""So, Tuple is ordered and so, indexed as well """

t[3]= 'Tiger'

"""So, tuple once created, it is non editable"""

dir(t) # to check all the available method for tuple

"""####**count()**"""

t.count('Sharmi') # to check the number of times the specified element has appeared in the tuple

"""####**index()**"""

t.index(4.44) # to check the positive index position for the specified element in the tuple

t.index('Sharmi') # so it gives the first positive index position for any element that has appeared more than once

"""##**4. Dictionary**"""

D = { "brand": "H&M", "Comic" : "Marvel", "year": 2022}
D

D["Comic"]

"""In Dictionary the values are indexed by a particular key."""

D[45] = 90 # added the value 90 for the key 45
D

"""Dictionary is editable"""

dir(D) # to check all the available methods for dictionary

"""####**clear()**"""

D.clear() # to clear all the elements from the dictionary

D

D = {'brand': 'H&M', 'Comic': 'Marvel', 'year': 2022, 45: 90}
D

"""####**copy()**"""

E= D.copy() # to copy the dictionary
E

"""####**fromkeys()**"""

D.fromkeys('brand',1) #gives a dictionary with the specified keys and value

brand_key = {'b', 'r', 'a', 'n', 'd'} # another way
num=1
D.fromkeys(brand_key, num)

"""####**get()**"""

D.get('Comic') # it gives the value of the specified key

"""####**items()**"""

D.items() # to get a list containing tuple for each key and value pair

"""####**keys()**"""

D.keys() # to get the list containing the keys of the dictionary

"""####**pop()**"""

D.pop(45) # it removes the element of which the key is specified
D

"""####**popitem()**"""

D.popitem() # it removes the last inserted key-value pair

D

"""####**setdefault()**"""

D.setdefault(' ', 50) #it gives the value of the specified key and it key doesn't exist, it inserts the key with the specified value

D

"""####**update()**"""

F = {"Place":"Paris"}
D.update(F) # to update with the soecified keys and values
D

"""####**values()**"""

D.values() # it gives the list of all the values in the dictionary

"""###**To get the separate list of keys and values by one command**"""

for k,v in D.items():
  print("Key = ", k)
  print(" Value = ", v)

for k,v in D.items():
  print("Key = ", k, end=",")
  print(" Value = ", v)
  # print-> by default changes the line!

